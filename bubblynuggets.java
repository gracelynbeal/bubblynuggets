/* autogenerated by Processing revision 1276 on 2022-06-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;
import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class bubblynugget2_0 extends PApplet {



  //BuBblY NuGgEtS//

  Animation clockanimation, orderanimation, nuggetanimation, fryboyanimation, screen2animation, winneranimation, loseranimation;
  BubbleSystem bs;

  //overlays//
  PImage start, instruction, question, oil, floor, last;
  PImage [] order = new PImage [12];
  PImage [] screen2 = new PImage [133];
  PImage [] winner = new PImage [67];
  PImage [] loser = new PImage [67];
  PImage [] clock = new PImage [27];
  //order//
  int space;
  //bubbles//
  PImage [] bubble = new PImage [119];
  int bubbleX;
  float bubbleY;
  //nuggets//
  PImage [] nugget = new PImage [81];
  int nuggetX, frame, fallen;
  float nuggetY;
  //character//
  PImage [] fryboy = new PImage [2];
  int fryboyX, fryboyY;
  //sizzle//
  
  SoundFile sizzle;
 

   public void setup(){
  /* size commented out by preprocessor */;
  bubbleX=nuggetX+32;
  bubbleY=nuggetY-4.5f;
  fryboyY=240;
  space=0;
  //overlays//
  last = loadImage("nugget_81.png");
  question=loadImage("question.png");
  start=loadImage("start.png");
  instruction=loadImage("instruction.png");
  oil=loadImage("oil.jpg");
  floor=loadImage("floor.png");
  //sizzle//
  sizzle = new SoundFile(this, "sizzle.mp3");
  sizzle.loop();
  //animations//
  nuggetanimation= new Animation("nugget_", 81);
  orderanimation=new Animation("order",12);
  fryboyanimation=new Animation("fryboy",2);  
  screen2animation=new Animation("screen2_", 132);
  winneranimation=new Animation("Winner_", 67);
  loseranimation=new Animation("Loser_", 67);
  clockanimation=new Animation("Clock_", 27);
  //bubbles//
  bs = new BubbleSystem(new PVector());}

   public void draw(){ 
  background(oil);
  //screen1//
  if(space==0){
  for(int i=0; i<=3; i++){
  bs.run();
  bs.bubbles.add(new Bubble(new PVector(i*100, 700)));}
  image(start, 0,0,400,400);}
  //screen2//
  if(space==0 && keyCode==' '){
  space=space+1;}
  if(space==1){
  screen2animation.run(0,0);}
  if(space==1 && keyPressed==true && key==' '){
  space=2;}
  //game//
  if(space==2){
  image(floor, 0,250);
  image(question, 350, 10, 40, 40);
  //nuggets//
  fryboyanimation.toggle();
  nuggetanimation.respawn(nuggetX, nuggetY);
  nuggetanimation.intersect();
  if(mouseX>350&&mouseX<400&&mouseY>0&&mouseY<40){
  image(instruction,0,0,400,400);}}}
  class Animation {
  PImage[]images;
  PImage last;
  int imageCount, frame, fallen;
  int nuggetX, bubbleX;
  float nuggetY, bubbleY;
  int catcher;
  float order;
  PImage[]ordered= new PImage[12];
  boolean caught, lost;
  int gametime=0;
  int wait=3000;
  
  Animation(String imagePrefix, int count){
  //images//
  imageCount = count;
  images = new PImage[imageCount];
  last = loadImage("nugget_81.png");
  //imagemovement//
  for (int i=0; i< imageCount; i++){
  String filename = imagePrefix + nf(i, 1) + ".png";
  images[i]=loadImage(filename);}  
  //orders//
  ordered[0]=loadImage("order0.png");
  ordered[1]=loadImage("order1.png");
  ordered[2]=loadImage("order2.png");
  ordered[3]=loadImage("order3.png");
  ordered[4]=loadImage("order4.png");
  ordered[5]=loadImage("order5.png");
  ordered[6]=loadImage("order6.png");
  ordered[7]=loadImage("order7.png");
  ordered[8]=loadImage("order8.png");
  ordered[9]=loadImage("order9.png");
  ordered[10]=loadImage("order10.png");
  ordered[11]=loadImage("order11.png");
  }
  
   public void run(int x, int y){
  frame = (frame+1) % imageCount;
  image(images[frame], x, y);}
  
   public void respawn(int nuggetX, float nuggetY){
  intersect();
  if(frame>=1 && frame<=70){
  nuggetY=nuggetY+3.5f;}
  if(frame==80){
  fallen=fallen+1;
  nuggetY=-1;
  bubbleY=-1;}
  //respawn//
  if(fallen==1 && caught==true){
  nuggetX=130;}
  else if(fallen==2 && caught==true){
  nuggetX=290;}
  else if(fallen==3 && caught==true){
  nuggetX=50;}
  else if(fallen==4 && caught==true){
  nuggetX=190;}
  else if(fallen==5 && caught==true){
  nuggetX=95;}
  else if(fallen==6 && caught==true){
  nuggetX=310;}
  else if(fallen==7 && caught==true){
  nuggetX=0;}
  //drops//
  if(fallen==1 && caught==false){
  image(last, nuggetX, nuggetY);
  nuggetX=130;}
  else if(fallen==2 && caught==false){
  image(last, nuggetX+130, nuggetY);
  nuggetX=290;}
  else if(fallen==3 && caught==false){
  image(last, nuggetX+290, nuggetY);
  nuggetX=50;}
  else if(fallen==4 && caught==false){
  image(last, nuggetX+50, nuggetY);
  nuggetX=190;}
  else if(fallen==5 && caught==false){
  image(last, nuggetX+190, nuggetY);
  nuggetX=95;}
  else if(fallen==6 && caught==false){
  image(last, nuggetX+95, nuggetY);
  nuggetX=310;}
  else if(fallen==7 && caught==false){
  image(last, nuggetX+310, nuggetY);
  nuggetX=0;}
  if(fallen==8){fallen=0;} 
  frame = (frame+1) % imageCount;
  image(images[frame], nuggetX, nuggetY);
  bs.run();
  bs.bubbles.add(new Bubble(new PVector(bubbleX=nuggetX+32, bubbleY=bubbleY+3.4f)));
  clockanimation.run(0,0);
  } 

   public void toggle(){
  if(keyCode!=LEFT && keyCode!= RIGHT){
  image(images[0], fryboyX, 210);}
  if(keyCode==LEFT){
  image(images[0], fryboyX, 210);
  fryboyX=fryboyX-3;}
  if(keyCode==RIGHT){
  image(images[1], fryboyX, 210);
  fryboyX=fryboyX+3;}
  }
  
   public void intersect(){
  if (gametime<wait){
  gametime++;}
  if(bubbleX>=fryboyX && bubbleX<=fryboyX+25 && bubbleY>=230 && bubbleY<=250){
  caught=true;
  frame=1;
  fallen=fallen+1;
  order=order+1;
  bubbleY=-1;}
  if(bubbleX>=fryboyX+110 && bubbleX<=fryboyX+135 && bubbleY>=230 && bubbleY<=250){
  caught=true;
  frame=1;
  fallen=fallen+1;
  order=order+1;
  bubbleY=-1;}
  println("beat the clock! 3000 vs.", gametime);
  if(frame>=80){
  caught=false;}
  if(fallen==8){fallen=0;}
  //order loader//
  if(order<1){
  image(ordered[0],-15,-25,450,800);}
  else if(order>=1.0f && order<2.0f){
  image(ordered[1],-15,-25,450,800);}
  else if(order>=2.0f && order<3.0f){
  image(ordered[2],-15,-25,450,800);}
  else if(order>=3.0f && order<4){
  image(ordered[3],-15,-25,450,800);}
  else if(order>=4.0f && order<5){
  image(ordered[4],-15,-25,450,800);}
  else if(order>=5.0f && order<6.0f){
  image(ordered[5],-15,-25,450,800);}
  else if(order>=6.0f && order<7.0f){
  image(ordered[6],-15,-25,450,800);}
  else if(order>=7.0f && order<8.0f){
  image(ordered[7],-15,-25,450,800);}
  else if(order>=8.0f && order<9.0f){
  image(ordered[8],-15,-25,450,800);}
  else if(order>=9 && order<10){
  image(ordered[9],-15,-25,450,800);}
  else if(order>=10 && order<11){
  image(ordered[10],-15,-25,450,800);}
  else if(order>=11 && order<12){
  image(ordered[11],-15,-25,450,800);}
  else if(order>=12 && gametime<wait){
  winneranimation.run(0,0);
  gametime=0;}
  if (gametime>=wait){
  lost=true;
  loseranimation.run(0,0);}
  if(lost==true & keyPressed==true && key==' '){
  gametime=0;
  order=0;
  lost=false;
  frame=1;}
  }}
  
  
  
  class Bubble {
  PVector position;
  PVector velocity;
  PVector acceleration;
  float lifespan;
  PImage bubble;

  Bubble(PVector l) {
  bubble = loadImage("bubble.png");
  acceleration = new PVector(0, -0.05f);
  velocity = new PVector(random(-1, 1), random(-2, 0));
  position = l.copy();
  lifespan = 255.0f;
  }

   public void run() {
  update();
  display();}

   public void update() {
  velocity.add(acceleration);
  position.add(velocity);
  lifespan -= 1.0f;}
   public void display() {
  stroke(255, lifespan);
  fill(255, lifespan);
  image(bubble, position.x, position.y, 8, 8);}
   public boolean isDead() {
  if (lifespan < 0.0f) {
  return true;
  } else {
  return false;}}}
  class BubbleSystem {
  ArrayList<Bubble> bubbles;
  PVector origin;

  BubbleSystem(PVector position){
  origin = position.copy();
  bubbles = new ArrayList<Bubble>();}

   public void addBubble(){
  bubbles.add(new Bubble(origin));}

   public void run() {
  for (int i = bubbles.size()-1; i >= 0; i--) {
  Bubble b = bubbles.get(i);
  b.run();
  if (b.isDead()) {
  bubbles.remove(i);}}}}


  public void settings() { size(400, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "bubblynugget2_0" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
